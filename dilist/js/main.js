document.addEventListener("DOMContentLoaded",()=>{class AddScriptEnd{constructor(t,e){const s=document.createElement("script");s.setAttribute("src",t),document.body.insertAdjacentElement("beforeend",s),s.addEventListener("load",e||(()=>console.log("Script added successfully!!")))}}setTimeout(()=>{new AddScriptEnd("https://www.googletagmanager.com/gtag/js?id=UA-140881194-1",()=>{function gtag(){dataLayer.push(arguments)}window.dataLayer=window.dataLayer||[],gtag("js",new Date),gtag("config","UA-140881194-1")})},2e3),function superLazy(){let t=document.querySelectorAll("[data-lz],[data-lz-srcset],[data-bg-lz]");t.forEach(t=>t.classList.add("sleeping")),"IntersectionObserver"in window?function lazyLoad(){let e={threshold:.15};t.forEach(t=>{new IntersectionObserver((t,e)=>{t.forEach(t=>{if(t.isIntersecting){const s=t.target,n=s.getAttribute("data-bg-lz"),a=s.getAttribute("data-lz"),r=s.getAttribute("data-lz-srcset");n&&(s.style.backgroundImage=`url(${n})`),a&&s.setAttribute("src",a),r&&s.setAttribute("srcset",r),s.classList.replace("sleeping","awake"),e.disconnect()}})},e).observe(t)})}():(console.log("This browser doesn't support 'Intersection Observer'!"),window.addEventListener("scroll",()=>{t.forEach(t=>{if(t.classList.contains("sleeping")){if(t.getBoundingClientRect().top<=window.innerHeight){const e=t.getAttribute("data-bg-lz"),s=t.getAttribute("data-lz"),n=t.getAttribute("data-lz-srcset");e&&(t.style.backgroundImage=`url(${e})`),s&&t.setAttribute("src",s),n&&t.setAttribute("srcset",n),t.classList.replace("sleeping","awake")}}})}))}();new AddScriptEnd("./js/plugins/bootstrap-native.min.js"),new AddScriptEnd("./js/plugins/tiny-slider.js",()=>{tns({container:".my-slider",loop:!0,items:1,slideBy:1,nav:!1,autoplay:!0,speed:800,autoplayButtonOutput:!1,mouseDrag:!0,lazyload:!0,controls:!1,responsive:{640:{items:2},768:{items:3},1200:{items:4}}})});const t=document.querySelector(".top-nav"),e=document.querySelector(".navbar-track");if("IntersectionObserver"in window){const s={threshold:.15};(e=>{new IntersectionObserver(e=>{e.forEach(e=>{e.isIntersecting?(t.classList.replace("bg-white","bg-transparent"),t.classList.remove("shadow")):(t.classList.replace("bg-transparent","bg-white"),t.classList.add("shadow"))})},s).observe(e)})(e)}let s=0;window.addEventListener("scroll",()=>{const e=window.scrollY;e>s?t.classList.add("invisible"):t.classList.replace("invisible","visible"),s=e})});